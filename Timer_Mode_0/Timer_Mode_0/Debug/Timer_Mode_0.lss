
Timer_Mode_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ac  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000616  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000217  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001088  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036f  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000141b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	
	//Usa estas variables si quieres hacer los pulsos por tiempo
	int Time_Want = 65535;	//Tiempo en microsegundos
	int Time_Tot = 65535;	//Tiempo total (FFFF)	
	int Time_Used = Time_Tot - Time_Want;
	DDRD |= (1<<PIND5);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 62       	ori	r24, 0x20	; 32
  84:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1<<CS10); //Configuramos el timer_= y con una frecuencia de 1MHz
  86:	e1 e8       	ldi	r30, 0x81	; 129
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	80 83       	st	Z, r24
   
    while (1) 
    {
		TIFR1 &=~(0<<TOV1);
  90:	86 b3       	in	r24, 0x16	; 22
  92:	86 bb       	out	0x16, r24	; 22
		TCNT1 = Time_Used;
  94:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  98:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		while(!(TIFR1 &(1<<TOV1))){ //Mientras TOV1 = 0, QUEDATE AHI
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <main+0x24>
			PORTD |= (1<<PORTD5);
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	8b b9       	out	0x0b, r24	; 11
   
    while (1) 
    {
		TIFR1 &=~(0<<TOV1);
		TCNT1 = Time_Used;
		while(!(TIFR1 &(1<<TOV1))){ //Mientras TOV1 = 0, QUEDATE AHI
  a4:	b0 9b       	sbis	0x16, 0	; 22
  a6:	fb cf       	rjmp	.-10     	; 0x9e <main+0x1e>
			PORTD |= (1<<PORTD5);
		} 
		TIFR1 &=~(0<<TOV1);
  a8:	86 b3       	in	r24, 0x16	; 22
  aa:	86 bb       	out	0x16, r24	; 22
		TCNT1 = Time_Used;
  ac:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  b0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		while(!(TIFR1 &(1<<TOV1))){ //Mientras TOV1 = 0, QUEDATE AHI
  b4:	03 c0       	rjmp	.+6      	; 0xbc <main+0x3c>
			PORTD &=~ (1<<PORTD5);
  b6:	8b b1       	in	r24, 0x0b	; 11
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	8b b9       	out	0x0b, r24	; 11
		while(!(TIFR1 &(1<<TOV1))){ //Mientras TOV1 = 0, QUEDATE AHI
			PORTD |= (1<<PORTD5);
		} 
		TIFR1 &=~(0<<TOV1);
		TCNT1 = Time_Used;
		while(!(TIFR1 &(1<<TOV1))){ //Mientras TOV1 = 0, QUEDATE AHI
  bc:	b0 9b       	sbis	0x16, 0	; 22
  be:	fb cf       	rjmp	.-10     	; 0xb6 <main+0x36>
  c0:	e7 cf       	rjmp	.-50     	; 0x90 <main+0x10>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
