
IR(R).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c6  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073e  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000040f  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001650  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cd  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000182  00000000  00000000  00001a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001bf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  78:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <IR_initR>:
	while(!(TIFR1 &(1<<TOV1)));	    //Mientras TOV1 = 0, QUEDATE AHI Y CUENTA
}

int IR_initR()
{
	DDRD  |=(0<<4);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD |=(1<<4);
  84:	8b b1       	in	r24, 0x0b	; 11
  86:	80 61       	ori	r24, 0x10	; 16
  88:	8b b9       	out	0x0b, r24	; 11
	
	TIFR1 &=~(0<<TOV1);		
  8a:	86 b3       	in	r24, 0x16	; 22
  8c:	86 bb       	out	0x16, r24	; 22
	TCCR1B |= (1<<CS10);
  8e:	e1 e8       	ldi	r30, 0x81	; 129
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	81 60       	ori	r24, 0x01	; 1
  96:	80 83       	st	Z, r24
	TCNT1 = 0;
  98:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  9c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCNT0 = 0;
  a0:	16 bc       	out	0x26, r1	; 38
	for (int i = 0; i < 9 ; i+=1)
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	07 c0       	rjmp	.+14     	; 0xb6 <IR_initR+0x36>
	{
		while(!(TIFR1 &(1<<TOV1)))
		{
			TCCR0B |=(1<<CS01)|(1<<CS02);	//Detecta cada flanco de subida
  a8:	85 b5       	in	r24, 0x25	; 37
  aa:	86 60       	ori	r24, 0x06	; 6
  ac:	85 bd       	out	0x25, r24	; 37
	TCCR1B |= (1<<CS10);
	TCNT1 = 0;
	TCNT0 = 0;
	for (int i = 0; i < 9 ; i+=1)
	{
		while(!(TIFR1 &(1<<TOV1)))
  ae:	b0 9b       	sbis	0x16, 0	; 22
  b0:	fb cf       	rjmp	.-10     	; 0xa8 <IR_initR+0x28>
	
	TIFR1 &=~(0<<TOV1);		
	TCCR1B |= (1<<CS10);
	TCNT1 = 0;
	TCNT0 = 0;
	for (int i = 0; i < 9 ; i+=1)
  b2:	2f 5f       	subi	r18, 0xFF	; 255
  b4:	3f 4f       	sbci	r19, 0xFF	; 255
  b6:	29 30       	cpi	r18, 0x09	; 9
  b8:	31 05       	cpc	r19, r1
  ba:	cc f3       	brlt	.-14     	; 0xae <IR_initR+0x2e>
		while(!(TIFR1 &(1<<TOV1)))
		{
			TCCR0B |=(1<<CS01)|(1<<CS02);	//Detecta cada flanco de subida
		}
	}
	return TCNT0; 
  bc:	86 b5       	in	r24, 0x26	; 38
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	08 95       	ret

000000c2 <main>:
#define F_CPU 1000000UL
#include "IRSTP/IRSTP.h"

int main(void)
{
	DDRB |=0x0F;
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	8f 60       	ori	r24, 0x0F	; 15
  c6:	84 b9       	out	0x04, r24	; 4
	PORTB|=0x00;
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	85 b9       	out	0x05, r24	; 5
	int Cuenta = 0;
    while (1) 
    {
		Cuenta = IR_initR();
  cc:	0e 94 40 00 	call	0x80	; 0x80 <IR_initR>
		if(Cuenta == 1)
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	91 05       	cpc	r25, r1
  d4:	41 f4       	brne	.+16     	; 0xe6 <main+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	e7 ea       	ldi	r30, 0xA7	; 167
  d8:	f1 e6       	ldi	r31, 0x61	; 97
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x18>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x1e>
  e0:	00 00       	nop
		{
			_delay_ms(100);
			PORTB = 0x01;
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	25 b9       	out	0x05, r18	; 5
		}
		
		if(Cuenta == 2)
  e6:	82 30       	cpi	r24, 0x02	; 2
  e8:	91 05       	cpc	r25, r1
  ea:	49 f4       	brne	.+18     	; 0xfe <main+0x3c>
  ec:	e7 ea       	ldi	r30, 0xA7	; 167
  ee:	f1 e6       	ldi	r31, 0x61	; 97
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x2e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x34>
  f6:	00 00       	nop
		{
			_delay_ms(100);
			PORTB &=~ 0x01;
  f8:	25 b1       	in	r18, 0x05	; 5
  fa:	2e 7f       	andi	r18, 0xFE	; 254
  fc:	25 b9       	out	0x05, r18	; 5
		}
		
		if(Cuenta == 3)
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	91 05       	cpc	r25, r1
 102:	41 f4       	brne	.+16     	; 0x114 <main+0x52>
 104:	e7 ea       	ldi	r30, 0xA7	; 167
 106:	f1 e6       	ldi	r31, 0x61	; 97
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x46>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x4c>
 10e:	00 00       	nop
		{
			_delay_ms(100);
			PORTB = 0x02;
 110:	22 e0       	ldi	r18, 0x02	; 2
 112:	25 b9       	out	0x05, r18	; 5
		}
		
		if(Cuenta > 3)
 114:	04 97       	sbiw	r24, 0x04	; 4
 116:	d4 f2       	brlt	.-76     	; 0xcc <main+0xa>
 118:	87 ea       	ldi	r24, 0xA7	; 167
 11a:	91 e6       	ldi	r25, 0x61	; 97
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x5a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x60>
 122:	00 00       	nop
		{
			_delay_ms(100);
			PORTB &=~ 0x02;
 124:	85 b1       	in	r24, 0x05	; 5
 126:	8d 7f       	andi	r24, 0xFD	; 253
 128:	85 b9       	out	0x05, r24	; 5
 12a:	d0 cf       	rjmp	.-96     	; 0xcc <main+0xa>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
