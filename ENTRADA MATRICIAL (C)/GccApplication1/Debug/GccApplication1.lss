
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000248  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000764  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069f  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000422  00000000  00000000  0000115f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b9  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e9  00000000  00000000  00001971  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <avr/io.h>
#define	F_CPU 1000000UL
#include <util/delay.h>

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	60 97       	sbiw	r28, 0x10	; 16
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	//-----------------------------------------------
	//          ZONA DE DEFINICION DE PINES
	//-----------------------------------------------
	DDRB = 0x0F;
  aa:	8f e0       	ldi	r24, 0x0F	; 15
  ac:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	85 b9       	out	0x05, r24	; 5
	
	DDRD = 0xFF;
  b2:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  b4:	1b b8       	out	0x0b, r1	; 11
	//-----------------------------------------------
	
	//-----------------------------------------------
	//				VARIABLES A UTILIZAR
	//-----------------------------------------------
	int CODIN[2][4] = {{0X0E, 0X0D, 0X0B, 0X07}, // (CODIGO DE SALIDA) PARTE DEL CODIGO QUE NO SE MUEVE
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	e0 e0       	ldi	r30, 0x00	; 0
  ba:	f1 e0       	ldi	r31, 0x01	; 1
  bc:	de 01       	movw	r26, r28
  be:	11 96       	adiw	r26, 0x01	; 1
  c0:	01 90       	ld	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	8a 95       	dec	r24
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x2a>
    while (1) 
    {
		//-----------------------------------------------
		//			ZONA DEL CODIGO
		//-----------------------------------------------
		for(i = 0; i <=4 ; i += 1){								//Creamos una sentencia de "for anidado" para crear los codigos (parte no movil)
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	b7 c0       	rjmp	.+366    	; 0x23c <main+0x1a6>
			for(j = 0; j <=4 ; j += 1){							//Parte movil
				codread =CODIN[1][j] + CODIN[0][i];				//Creacion del codigo
  ce:	fa 01       	movw	r30, r20
  d0:	34 96       	adiw	r30, 0x04	; 4
  d2:	ee 0f       	add	r30, r30
  d4:	ff 1f       	adc	r31, r31
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	e8 0f       	add	r30, r24
  e0:	f9 1f       	adc	r31, r25
  e2:	20 81       	ld	r18, Z
  e4:	31 81       	ldd	r19, Z+1	; 0x01
  e6:	fb 01       	movw	r30, r22
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	e8 0f       	add	r30, r24
  ee:	f9 1f       	adc	r31, r25
  f0:	80 81       	ld	r24, Z
  f2:	91 81       	ldd	r25, Z+1	; 0x01
  f4:	28 0f       	add	r18, r24
  f6:	39 1f       	adc	r19, r25
		//CODIGO DE SALIDA = Parte Movil + Parte no movil	
		
				PORTB = codread;								//Sacamos el codigo
  f8:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	83 ed       	ldi	r24, 0xD3	; 211
  fc:	90 e3       	ldi	r25, 0x30	; 48
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x68>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x6e>
 104:	00 00       	nop
				_delay_ms(50);									//El atmega se hace pendejo 200ms
				in_code = PINB;									//Leemos el codigo que se metio
 106:	83 b1       	in	r24, 0x03	; 3
 108:	90 e0       	ldi	r25, 0x00	; 0
				//-----------------------------------------------------
				//			ZONA DEL CODIGO PARA LOS DATOS DE SALIDA
				//-----------------------------------------------------
				
				//PARTE PARA LA LINEA 1 DEL TECLADO HEXADECIMAL
				if (in_code==codread && in_code== 0xEE){		//Enviamos un (1) a la salida del puerto D
 10a:	28 17       	cp	r18, r24
 10c:	39 07       	cpc	r19, r25
 10e:	31 f4       	brne	.+12     	; 0x11c <main+0x86>
 110:	8e 3e       	cpi	r24, 0xEE	; 238
 112:	91 05       	cpc	r25, r1
 114:	19 f4       	brne	.+6      	; 0x11c <main+0x86>
					PORTD = 0x01;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	8b b9       	out	0x0b, r24	; 11
 11a:	85 c0       	rjmp	.+266    	; 0x226 <main+0x190>
				}else if(in_code==codread && in_code== 0xDE){	//Enviamos un (2) a la salida del puerto D
 11c:	28 17       	cp	r18, r24
 11e:	39 07       	cpc	r19, r25
 120:	31 f4       	brne	.+12     	; 0x12e <main+0x98>
 122:	8e 3d       	cpi	r24, 0xDE	; 222
 124:	91 05       	cpc	r25, r1
 126:	19 f4       	brne	.+6      	; 0x12e <main+0x98>
					PORTD = 0x02;
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	7c c0       	rjmp	.+248    	; 0x226 <main+0x190>
				}else if(in_code==codread && in_code== 0xBE){	//Enviamos un (3) a la salida del puerto D
 12e:	28 17       	cp	r18, r24
 130:	39 07       	cpc	r19, r25
 132:	31 f4       	brne	.+12     	; 0x140 <main+0xaa>
 134:	8e 3b       	cpi	r24, 0xBE	; 190
 136:	91 05       	cpc	r25, r1
 138:	19 f4       	brne	.+6      	; 0x140 <main+0xaa>
					PORTD = 0x03;
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	8b b9       	out	0x0b, r24	; 11
 13e:	73 c0       	rjmp	.+230    	; 0x226 <main+0x190>
				}else if(in_code==codread && in_code== 0x7E){	//Enviamos un (10) a la salida del puerto D
 140:	28 17       	cp	r18, r24
 142:	39 07       	cpc	r19, r25
 144:	31 f4       	brne	.+12     	; 0x152 <main+0xbc>
 146:	8e 37       	cpi	r24, 0x7E	; 126
 148:	91 05       	cpc	r25, r1
 14a:	19 f4       	brne	.+6      	; 0x152 <main+0xbc>
					PORTD = 0x0A;
 14c:	8a e0       	ldi	r24, 0x0A	; 10
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	6a c0       	rjmp	.+212    	; 0x226 <main+0x190>
					
				//PARTE PARA LA LINEA 2 DEL TECLADO HEXADECIMAL	
				}else if (in_code==codread && in_code== 0xED){	//Enviamos un (4) a la salida del puerto D
 152:	28 17       	cp	r18, r24
 154:	39 07       	cpc	r19, r25
 156:	31 f4       	brne	.+12     	; 0x164 <main+0xce>
 158:	8d 3e       	cpi	r24, 0xED	; 237
 15a:	91 05       	cpc	r25, r1
 15c:	19 f4       	brne	.+6      	; 0x164 <main+0xce>
					PORTD = 0x04;
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	8b b9       	out	0x0b, r24	; 11
 162:	61 c0       	rjmp	.+194    	; 0x226 <main+0x190>
				}else if(in_code==codread && in_code== 0xDD){	//Enviamos un (5) a la salida del puerto D
 164:	28 17       	cp	r18, r24
 166:	39 07       	cpc	r19, r25
 168:	31 f4       	brne	.+12     	; 0x176 <main+0xe0>
 16a:	8d 3d       	cpi	r24, 0xDD	; 221
 16c:	91 05       	cpc	r25, r1
 16e:	19 f4       	brne	.+6      	; 0x176 <main+0xe0>
					PORTD = 0x05;
 170:	85 e0       	ldi	r24, 0x05	; 5
 172:	8b b9       	out	0x0b, r24	; 11
 174:	58 c0       	rjmp	.+176    	; 0x226 <main+0x190>
				}else if(in_code==codread && in_code== 0xBD){	//Enviamos un (6) a la salida del puerto D
 176:	28 17       	cp	r18, r24
 178:	39 07       	cpc	r19, r25
 17a:	31 f4       	brne	.+12     	; 0x188 <main+0xf2>
 17c:	8d 3b       	cpi	r24, 0xBD	; 189
 17e:	91 05       	cpc	r25, r1
 180:	19 f4       	brne	.+6      	; 0x188 <main+0xf2>
					PORTD = 0x06;
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	8b b9       	out	0x0b, r24	; 11
 186:	4f c0       	rjmp	.+158    	; 0x226 <main+0x190>
				}else if(in_code==codread && in_code== 0x7D){	//Enviamos un (11) a la salida del puerto D
 188:	28 17       	cp	r18, r24
 18a:	39 07       	cpc	r19, r25
 18c:	31 f4       	brne	.+12     	; 0x19a <main+0x104>
 18e:	8d 37       	cpi	r24, 0x7D	; 125
 190:	91 05       	cpc	r25, r1
 192:	19 f4       	brne	.+6      	; 0x19a <main+0x104>
					PORTD = 0x0B;
 194:	8b e0       	ldi	r24, 0x0B	; 11
 196:	8b b9       	out	0x0b, r24	; 11
 198:	46 c0       	rjmp	.+140    	; 0x226 <main+0x190>
				
				//PARTE PARA LA LINEA 3 DEL TECLADO HEXADECIMAL
				}else if (in_code==codread && in_code== 0xED){	//Enviamos un (4) a la salida del puerto D
 19a:	28 17       	cp	r18, r24
 19c:	39 07       	cpc	r19, r25
 19e:	31 f4       	brne	.+12     	; 0x1ac <main+0x116>
 1a0:	8d 3e       	cpi	r24, 0xED	; 237
 1a2:	91 05       	cpc	r25, r1
 1a4:	19 f4       	brne	.+6      	; 0x1ac <main+0x116>
					PORTD = 0x07;
 1a6:	87 e0       	ldi	r24, 0x07	; 7
 1a8:	8b b9       	out	0x0b, r24	; 11
 1aa:	3d c0       	rjmp	.+122    	; 0x226 <main+0x190>
				}else if(in_code==codread && in_code== 0xDD){	//Enviamos un (5) a la salida del puerto D
 1ac:	28 17       	cp	r18, r24
 1ae:	39 07       	cpc	r19, r25
 1b0:	31 f4       	brne	.+12     	; 0x1be <main+0x128>
 1b2:	8d 3d       	cpi	r24, 0xDD	; 221
 1b4:	91 05       	cpc	r25, r1
 1b6:	19 f4       	brne	.+6      	; 0x1be <main+0x128>
					PORTD = 0x08;
 1b8:	88 e0       	ldi	r24, 0x08	; 8
 1ba:	8b b9       	out	0x0b, r24	; 11
 1bc:	34 c0       	rjmp	.+104    	; 0x226 <main+0x190>
				}else if(in_code==codread && in_code== 0xBD){	//Enviamos un (6) a la salida del puerto D
 1be:	28 17       	cp	r18, r24
 1c0:	39 07       	cpc	r19, r25
 1c2:	31 f4       	brne	.+12     	; 0x1d0 <main+0x13a>
 1c4:	8d 3b       	cpi	r24, 0xBD	; 189
 1c6:	91 05       	cpc	r25, r1
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <main+0x13a>
					PORTD = 0x09;
 1ca:	89 e0       	ldi	r24, 0x09	; 9
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	2b c0       	rjmp	.+86     	; 0x226 <main+0x190>
				}else if(in_code==codread && in_code== 0x7D){	//Enviamos un (11) a la salida del puerto D
 1d0:	28 17       	cp	r18, r24
 1d2:	39 07       	cpc	r19, r25
 1d4:	31 f4       	brne	.+12     	; 0x1e2 <main+0x14c>
 1d6:	8d 37       	cpi	r24, 0x7D	; 125
 1d8:	91 05       	cpc	r25, r1
 1da:	19 f4       	brne	.+6      	; 0x1e2 <main+0x14c>
					PORTD = 0x0C;
 1dc:	8c e0       	ldi	r24, 0x0C	; 12
 1de:	8b b9       	out	0x0b, r24	; 11
 1e0:	22 c0       	rjmp	.+68     	; 0x226 <main+0x190>
				
				//PARTE PARA LA LINEA 4 DEL TECLADO HEXADECIMAL
				}else if (in_code==codread && in_code== 0xED){	//Enviamos un (4) a la salida del puerto D
 1e2:	28 17       	cp	r18, r24
 1e4:	39 07       	cpc	r19, r25
 1e6:	31 f4       	brne	.+12     	; 0x1f4 <main+0x15e>
 1e8:	8d 3e       	cpi	r24, 0xED	; 237
 1ea:	91 05       	cpc	r25, r1
 1ec:	19 f4       	brne	.+6      	; 0x1f4 <main+0x15e>
					PORTD = 0x0E;
 1ee:	8e e0       	ldi	r24, 0x0E	; 14
 1f0:	8b b9       	out	0x0b, r24	; 11
 1f2:	19 c0       	rjmp	.+50     	; 0x226 <main+0x190>
				}else if(in_code==codread && in_code== 0xDD){	//Enviamos un (5) a la salida del puerto D
 1f4:	28 17       	cp	r18, r24
 1f6:	39 07       	cpc	r19, r25
 1f8:	29 f4       	brne	.+10     	; 0x204 <main+0x16e>
 1fa:	8d 3d       	cpi	r24, 0xDD	; 221
 1fc:	91 05       	cpc	r25, r1
 1fe:	11 f4       	brne	.+4      	; 0x204 <main+0x16e>
					PORTD = 0x00;
 200:	1b b8       	out	0x0b, r1	; 11
 202:	11 c0       	rjmp	.+34     	; 0x226 <main+0x190>
				}else if(in_code==codread && in_code== 0xBD){	//Enviamos un (6) a la salida del puerto D
 204:	28 17       	cp	r18, r24
 206:	39 07       	cpc	r19, r25
 208:	31 f4       	brne	.+12     	; 0x216 <main+0x180>
 20a:	8d 3b       	cpi	r24, 0xBD	; 189
 20c:	91 05       	cpc	r25, r1
 20e:	19 f4       	brne	.+6      	; 0x216 <main+0x180>
					PORTD = 0x0F;
 210:	8f e0       	ldi	r24, 0x0F	; 15
 212:	8b b9       	out	0x0b, r24	; 11
 214:	08 c0       	rjmp	.+16     	; 0x226 <main+0x190>
				}else if(in_code==codread && in_code== 0x7D){	//Enviamos un (11) a la salida del puerto D
 216:	28 17       	cp	r18, r24
 218:	39 07       	cpc	r19, r25
 21a:	29 f4       	brne	.+10     	; 0x226 <main+0x190>
 21c:	8d 37       	cpi	r24, 0x7D	; 125
 21e:	91 05       	cpc	r25, r1
 220:	11 f4       	brne	.+4      	; 0x226 <main+0x190>
					PORTD = 0x0D;
 222:	8d e0       	ldi	r24, 0x0D	; 13
 224:	8b b9       	out	0x0b, r24	; 11
    {
		//-----------------------------------------------
		//			ZONA DEL CODIGO
		//-----------------------------------------------
		for(i = 0; i <=4 ; i += 1){								//Creamos una sentencia de "for anidado" para crear los codigos (parte no movil)
			for(j = 0; j <=4 ; j += 1){							//Parte movil
 226:	4f 5f       	subi	r20, 0xFF	; 255
 228:	5f 4f       	sbci	r21, 0xFF	; 255
 22a:	02 c0       	rjmp	.+4      	; 0x230 <main+0x19a>
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	45 30       	cpi	r20, 0x05	; 5
 232:	51 05       	cpc	r21, r1
 234:	0c f4       	brge	.+2      	; 0x238 <main+0x1a2>
 236:	4b cf       	rjmp	.-362    	; 0xce <main+0x38>
    while (1) 
    {
		//-----------------------------------------------
		//			ZONA DEL CODIGO
		//-----------------------------------------------
		for(i = 0; i <=4 ; i += 1){								//Creamos una sentencia de "for anidado" para crear los codigos (parte no movil)
 238:	6f 5f       	subi	r22, 0xFF	; 255
 23a:	7f 4f       	sbci	r23, 0xFF	; 255
 23c:	65 30       	cpi	r22, 0x05	; 5
 23e:	71 05       	cpc	r23, r1
 240:	ac f3       	brlt	.-22     	; 0x22c <main+0x196>
 242:	42 cf       	rjmp	.-380    	; 0xc8 <main+0x32>

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
