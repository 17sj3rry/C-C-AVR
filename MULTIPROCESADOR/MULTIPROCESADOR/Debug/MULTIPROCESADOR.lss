
MULTIPROCESADOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a4e  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ae  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c4  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042e  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000238  00000000  00000000  00001fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000021fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	5d 00       	.word	0x005d	; ????
  6a:	5f 00       	.word	0x005f	; ????
  6c:	62 00       	.word	0x0062	; ????
  6e:	65 00       	.word	0x0065	; ????
  70:	68 00       	.word	0x0068	; ????
  72:	6b 00       	.word	0x006b	; ????
  74:	6e 00       	.word	0x006e	; ????
  76:	71 00       	.word	0x0071	; ????
  78:	74 00       	.word	0x0074	; ????
  7a:	77 00       	.word	0x0077	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  8c:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <BCD_init_7447>:
			case 8:
			PORTD |= 0x7F;
			case 9:
			PORTD |= 0x73;
			default:
			PORTD |= 0x00;
  94:	84 34       	cpi	r24, 0x44	; 68
  96:	19 f4       	brne	.+6      	; 0x9e <BCD_init_7447+0xa>
  98:	9a b1       	in	r25, 0x0a	; 10
  9a:	9f 60       	ori	r25, 0x0F	; 15
  9c:	9a b9       	out	0x0a, r25	; 10
  9e:	82 34       	cpi	r24, 0x42	; 66
  a0:	19 f4       	brne	.+6      	; 0xa8 <BCD_init_7447+0x14>
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	8f 60       	ori	r24, 0x0F	; 15
  a6:	84 b9       	out	0x04, r24	; 4
  a8:	08 95       	ret

000000aa <BCD_Display_D_7447>:
	}
}

void BCD_Display_D_7447(int num)
{
	switch(num)
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	91 05       	cpc	r25, r1
  ae:	10 f5       	brcc	.+68     	; 0xf4 <BCD_Display_D_7447+0x4a>
  b0:	fc 01       	movw	r30, r24
  b2:	ec 5c       	subi	r30, 0xCC	; 204
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	0c 94 a4 00 	jmp	0x148	; 0x148 <__tablejump2__>
	{
		case 0:
		PORTD |= 0x00;
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	8b b9       	out	0x0b, r24	; 11
		case 1:
		PORTD |= 0x01;
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	8b b9       	out	0x0b, r24	; 11
		case 2:
		PORTD |= 0x02;
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	8b b9       	out	0x0b, r24	; 11
		case 3:
		PORTD |= 0x03;
  ca:	8b b1       	in	r24, 0x0b	; 11
  cc:	83 60       	ori	r24, 0x03	; 3
  ce:	8b b9       	out	0x0b, r24	; 11
		case 4:
		PORTD |= 0x04;
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	8b b9       	out	0x0b, r24	; 11
		case 5:
		PORTD |= 0x05;
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	85 60       	ori	r24, 0x05	; 5
  da:	8b b9       	out	0x0b, r24	; 11
		case 6:
		PORTD |= 0x06;
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	86 60       	ori	r24, 0x06	; 6
  e0:	8b b9       	out	0x0b, r24	; 11
		case 7:
		PORTD |= 0x07;
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	87 60       	ori	r24, 0x07	; 7
  e6:	8b b9       	out	0x0b, r24	; 11
		case 8:
		PORTD |= 0x08;
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	8b b9       	out	0x0b, r24	; 11
		case 9:
		PORTD |= 0x09;
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	89 60       	ori	r24, 0x09	; 9
  f2:	8b b9       	out	0x0b, r24	; 11
		default:
		PORTD |= 0x00;
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	8b b9       	out	0x0b, r24	; 11
  f8:	08 95       	ret

000000fa <main>:
#include "BCD/BCD.h"
#define F_CPU 1000000UL

int main(void)
{
	Timer_0_Init();					//Prendemos el timer para contar internamente
  fa:	0e 94 95 00 	call	0x12a	; 0x12a <Timer_0_Init>
	BCD_init_7447('D');				//Iniciamos el BCD y seleccionamos el puerto
  fe:	84 e4       	ldi	r24, 0x44	; 68
 100:	0e 94 4a 00 	call	0x94	; 0x94 <BCD_init_7447>
	
	int i = 0;						//Variable de conteo para el timer
	int ib = 0;						//Variable de conteno para el bcd
 104:	00 e0       	ldi	r16, 0x00	; 0
 106:	10 e0       	ldi	r17, 0x00	; 0
	
    while (1) 
    {
		for(i = 0; i < 16 ; i+= 1)	//Va a contar 15 veces deteniendose 65.535ms por cuenta
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	05 c0       	rjmp	.+10     	; 0x118 <main+0x1e>
		{							//65.535ms x 15 =~ 1s
		Timer_0_Count(65535);	
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	9f ef       	ldi	r25, 0xFF	; 255
 112:	0e 94 9b 00 	call	0x136	; 0x136 <Timer_0_Count>
	int i = 0;						//Variable de conteo para el timer
	int ib = 0;						//Variable de conteno para el bcd
	
    while (1) 
    {
		for(i = 0; i < 16 ; i+= 1)	//Va a contar 15 veces deteniendose 65.535ms por cuenta
 116:	21 96       	adiw	r28, 0x01	; 1
 118:	c0 31       	cpi	r28, 0x10	; 16
 11a:	d1 05       	cpc	r29, r1
 11c:	c4 f3       	brlt	.-16     	; 0x10e <main+0x14>
		{							//65.535ms x 15 =~ 1s
		Timer_0_Count(65535);	
		}
		
		ib += 1;					//Una vez termina, cuenta 1 aqui
 11e:	0f 5f       	subi	r16, 0xFF	; 255
 120:	1f 4f       	sbci	r17, 0xFF	; 255
		
		BCD_Display_D_7447(ib);			//Y lo envia aqui para mostarlo en pantalla
 122:	c8 01       	movw	r24, r16
 124:	0e 94 55 00 	call	0xaa	; 0xaa <BCD_Display_D_7447>
    }
 128:	ef cf       	rjmp	.-34     	; 0x108 <main+0xe>

0000012a <Timer_0_Init>:
{
	TIFR1 &=~(0<<TOV1);
	TCNT1 = Count;
	PORTB &=~ (1<<Pin);
	while(!(TIFR1 &(1<<TOV1)));
}
 12a:	e1 e8       	ldi	r30, 0x81	; 129
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	81 60       	ori	r24, 0x01	; 1
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <Timer_0_Count>:

void Timer_0_Count(int Count)
{
	TIFR1 &=~(0<<TOV1);
 136:	26 b3       	in	r18, 0x16	; 22
 138:	26 bb       	out	0x16, r18	; 22
	TCNT1 = Count;
 13a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 13e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while(!(TIFR1 &(1<<TOV1)));
 142:	b0 9b       	sbis	0x16, 0	; 22
 144:	fe cf       	rjmp	.-4      	; 0x142 <Timer_0_Count+0xc>
}
 146:	08 95       	ret

00000148 <__tablejump2__>:
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	05 90       	lpm	r0, Z+
 14e:	f4 91       	lpm	r31, Z
 150:	e0 2d       	mov	r30, r0
 152:	09 94       	ijmp

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
