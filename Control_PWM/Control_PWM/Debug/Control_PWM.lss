
Control_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001ac  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000789  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000690  00000000  00000000  00000a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e5  00000000  00000000  000010dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b7  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000186  00000000  00000000  0000180f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001995  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_1>
   8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_2>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  8e:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_1>:
#include <avr/interrupt.h>
#include <avr/delay.h>

volatile unsigned int incre = 5;		//Variable para aumentar el ancho del pulso PWM

ISR(INT0_vect){							//Detectamos la interrupcion para bajar el pulso
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	ef 93       	push	r30
  aa:	ff 93       	push	r31
	cli();								//Inicialmente se desactivan para ejecutar el codigo secuencial
  ac:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <__vector_1+0x1c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <__vector_1+0x22>
  b8:	00 00       	nop
	_delay_ms(50);						//Delay antidebounce
	OCR1A = OCR1A - incre;				//OCR1A decrementa y se guarda en si mismo
  ba:	e8 e8       	ldi	r30, 0x88	; 136
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	91 81       	ldd	r25, Z+1	; 0x01
  c2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ca:	82 1b       	sub	r24, r18
  cc:	93 0b       	sbc	r25, r19
  ce:	91 83       	std	Z+1, r25	; 0x01
  d0:	80 83       	st	Z, r24
	if(OCR1A <= 5){						//Si OCR1A baja menos del 5, entonces le devuelve el valor minimo
  d2:	80 81       	ld	r24, Z
  d4:	91 81       	ldd	r25, Z+1	; 0x01
  d6:	06 97       	sbiw	r24, 0x06	; 6
  d8:	30 f4       	brcc	.+12     	; 0xe6 <__vector_1+0x50>
		OCR1A = 5;						//Osea wey, no va a bajar mas de 5, ¿apoco crees que existe un pulso de -5 para pwm?
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	}									//¡Piensa, Mark, piensa!
	sei();								//Y activamos las interrupciones
  e6:	78 94       	sei
}
  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	3f 91       	pop	r19
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_2>:

ISR(INT1_vect){							//Lo mismo que arriba nomas que ahora para aumentar el ancho del pulso
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	cli();
 114:	f8 94       	cli
 116:	83 ed       	ldi	r24, 0xD3	; 211
 118:	90 e3       	ldi	r25, 0x30	; 48
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <__vector_2+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <__vector_2+0x22>
 120:	00 00       	nop
	_delay_ms(50);
	OCR1A = OCR1A + incre;
 122:	e8 e8       	ldi	r30, 0x88	; 136
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	20 81       	ld	r18, Z
 128:	31 81       	ldd	r19, Z+1	; 0x01
 12a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 132:	82 0f       	add	r24, r18
 134:	93 1f       	adc	r25, r19
 136:	91 83       	std	Z+1, r25	; 0x01
 138:	80 83       	st	Z, r24
	if(OCR1A >= 250){					//Y no pasa de 250
 13a:	80 81       	ld	r24, Z
 13c:	91 81       	ldd	r25, Z+1	; 0x01
 13e:	8a 3f       	cpi	r24, 0xFA	; 250
 140:	91 05       	cpc	r25, r1
 142:	30 f0       	brcs	.+12     	; 0x150 <__vector_2+0x52>
		OCR1A = 250;
 144:	8a ef       	ldi	r24, 0xFA	; 250
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 14c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	}
	sei();
 150:	78 94       	sei
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <main>:
int main(void)
{
	DDRB |=(1<<PINB1);					//PIN DONDE SALE EL PWM 
 168:	84 b1       	in	r24, 0x04	; 4
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	84 b9       	out	0x04, r24	; 4
	PORTD |=(1<<PIND3)|(1<<PIND2);		//PINES DE INTERRUPCIONES
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	8c 60       	ori	r24, 0x0C	; 12
 172:	8b b9       	out	0x0b, r24	; 11
	
	EICRA|=(1<<ISC11)|(1<<ISC01);		//HABILITACION DE PINES DE INTERRUPCION POR TRANSICION NEGATIVA
 174:	e9 e6       	ldi	r30, 0x69	; 105
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	8a 60       	ori	r24, 0x0A	; 10
 17c:	80 83       	st	Z, r24
	EIMSK|=(1<<INT1)|(1<<INT0);			//HABILITAR AMBOS PINES INTERRUPCION
 17e:	8d b3       	in	r24, 0x1d	; 29
 180:	83 60       	ori	r24, 0x03	; 3
 182:	8d bb       	out	0x1d, r24	; 29
	
	OCR1A = 5;							//CARGALE 5 PORQUE ESA ES TU CALIFICACION XD (La verdad, es porque el valor maximo que alcanza es 255, entonces es mas factible usar multiplos de 5)
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 18c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A|=(1<<COM1A1)|(1<<WGM10);		//FAST-PWM DE 8 BITS CON FRECUENCIA A 488Hz NO INVERTIDO
 190:	e0 e8       	ldi	r30, 0x80	; 128
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	81 68       	ori	r24, 0x81	; 129
 198:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM12)|(1<<CS11);		//N = 8 o 1MHz/8 = 125KHz frecuencia de conteo
 19a:	e1 e8       	ldi	r30, 0x81	; 129
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	8a 60       	ori	r24, 0x0A	; 10
 1a2:	80 83       	st	Z, r24
	
	sei();								//Habilitacion de interrupciones globales
 1a4:	78 94       	sei
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <main+0x3e>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
