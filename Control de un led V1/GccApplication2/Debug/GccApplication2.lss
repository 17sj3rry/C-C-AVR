
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000745  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  000008f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027d  00000000  00000000  00000f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a4  00000000  00000000  000015b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001655  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
{
//-------------------------------------------------------------
//					INICIO DE CONFIGURACIONES
//-------------------------------------------------------------

	DDRD |=(1<<PIND0);					//PIN DONDE ESTA CONECTADO UN LED
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	81 60       	ori	r24, 0x01	; 1
  84:	8a b9       	out	0x0a, r24	; 10
	DDRB |=(0<<PINB0)|(0<<PINB1);		//PIN DONDE ESTA CONECATADO UN BOTON
  86:	84 b1       	in	r24, 0x04	; 4
  88:	84 b9       	out	0x04, r24	; 4
	PORTB |=(0<<1)|(0<<0);				//NIVELES DE SALIDA PARA EL PIN 1 Y 0 DEL PUERTO B
  8a:	85 b1       	in	r24, 0x05	; 5
  8c:	85 b9       	out	0x05, r24	; 5
    while (1) 
    {
		//-------------------------------------------------------------
		//					INICIO DE CODIGO
		//-------------------------------------------------------------
		salida = PINB;					//Y ASOCIAMOS EL VALOR DE ESTA CON EL PUIERTO B (O LOS PINES DE ESTE )
  8e:	83 b1       	in	r24, 0x03	; 3
  90:	90 e0       	ldi	r25, 0x00	; 0
		
		if(salida == 0x1){				// SI TENEMOS UN 1 EN LA ENTRADA DEL PUERTO
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	91 05       	cpc	r25, r1
  96:	49 f4       	brne	.+18     	; 0xaa <main+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	e3 ed       	ldi	r30, 0xD3	; 211
  9a:	f0 e3       	ldi	r31, 0x30	; 48
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <main+0x1c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x22>
  a2:	00 00       	nop
			_delay_ms(50);				//Delay anti-denouncing
			PORTD  |=(1<<PORTD0);		//PRENDEMOS UN LED
  a4:	2b b1       	in	r18, 0x0b	; 11
  a6:	21 60       	ori	r18, 0x01	; 1
  a8:	2b b9       	out	0x0b, r18	; 11
			
		}if(salida == 0x2){				//SI TENEMOS UN 2 A LA ENTRADA DEL PUERTO
  aa:	02 97       	sbiw	r24, 0x02	; 2
  ac:	81 f7       	brne	.-32     	; 0x8e <main+0xe>
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x32>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
			_delay_ms(50);				//Delay anti-debouncing
			PORTD  &=~(1<<PORTD0);		// APAGAMOS EL LED
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	e6 cf       	rjmp	.-52     	; 0x8e <main+0xe>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
